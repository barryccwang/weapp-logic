<config>
{
  "usingComponents": {
    "hn-comment": "/components/comment.mina",
    "spinner": "/components/spinner.mina"
  }
}
</config>

<template>
  <view class="item-view" wx:if="{{ item }}">
    <view class="item-view-header">
      <view class="title" bindtap="tapTitle">{{ item.title }}</view>
      <view wx:if="{{ item.url }}" class="host">
        ({{ item.host }})
      </view>
      <view class="meta">
        {{ item.score }} points
        | by <view class="by link" bindtap="tapBy">{{ item.by }}</view>
        {{ item.timeAgo }} ago
      </view>
    </view>
    <view class="item-view-comments">
      <view class="item-view-comments-header">
        {{ item.kids ? item.descendants + ' comments' : 'No comments yet.' }}
        <view class="loading" wx:if="{{ isLoading }}"><spinner /></view>
      </view>
      <view wx:if="!isLoading" class="comment-children">
        <hn-comment wx:for="{{ item.kids }}" wx:key="*this" comment-id="{{ item }}" />
      </view>
    </view>
  </view>
</template>

<script>
import { decode } from 'he'
import { Page } from '@tinajs/tina'
import { tinax } from '../store'
import { host, timeAgo } from '../utils/filters'

Page.define(({
  mixins: [
    tinax.connect({
      state (state) {
        return {
          item: state.items.find((item) => item.id + '' === this.$route.query.id) || {},
        }
      },
      actions (actions) {
        return {
          fetchItems: actions.fetchItems,
        }
      },
    }),
  ],
  data: {
    isLoading: false,
  },

  compute (state) {
    let item = state.item || {}
    return {
      id: this.$route.query.id,
      item: {
        ...item,
        host: host(item.url || ''),
        timeAgo: timeAgo(item.time),
      }
    }
  },

  async onLoad () {
    await this.fetch()
    await this.fetchComments()
  },
  onShareAppMessage () {
    let item = this.data.item || {}
    return {
      title: item.title ? `${item.title}` : 'HackerNews 热点',
    }
  },

  methods: {
    tapBy () {
      let item = this.data.item || {}
      if (!item.by) {
        return
      }
      this.$router.navigate(`/pages/user?id=${item.by}`)
    },
    tapTitle () {
      let item = this.data.item || {}
      if (!item.id || !item.url) {
        return
      }
      this.$router.navigate(`/pages/article?id=${item.id}`)
    },

    fetch () {
      this.setData({ isLoading: true })
      return this.fetchItems({ ids: [this.$route.query.id] })
        .finally(this.$loading())
        .then(() => this.setData({ isLoading: false }))
    },

    fetchComments () {
      if (!this.data.item || !this.data.item.kids) {
        return
      }
      this.setData({ isLoading: true })
      fetchComments(tinax, this.data.item)
        .finally(this.$loading())
        .then(() => this.setData({ isLoading: false }))
    },
  }
}))

function fetchComments (store, item) {
  if (item && item.kids) {
    return store.dispatch('fetchItems', {
      ids: item.kids
    }).then(() => Promise.all(item.kids.map(id => {
      return fetchComments(store, store.state.items.find((item) => item.id === id))
    })))
  }
}

</script>

<style lang="less">
.item-view-header {
  background-color: #ff6600;
  padding: 36px 32px 42px;
  box-shadow: 0 1px 2px rgba(0,0,0,.1);
  font-size: 12px;
  color: #fff;
  .title {
    display: inline;
    font-size: 24px;
    font-weight: bold;
    line-height: 1.2em;
    margin: 0;
    margin-right: .5em;
  }
  .host {
    color: hsl(24,100%,80%);
  }
  .meta .link {
    text-decoration: underline;
  }
  .host, .meta view {
    display: inline;
  }
  .meta {
    margin: 18px 0 0;
  }
}
.item-view-comments {
  background-color: #fff;
  margin-top: 18px;
  padding: 0 32px 16px;
}
.item-view-comments-header {
  margin: 0;
  font-size: 14px;
  padding: 1.5em 0;
  position: relative;
  .loading {
    display: block;
    color: #999;
    float: right
  }
}
.comment-children {
  list-style-type: none;
  padding: 0;
  margin: 0;
  font-size: 12px;
}
</style>
